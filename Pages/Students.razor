@page "/"
@inject NavigationManager navigation
@inject IJSRuntime js


<h1>Students</h1>

@if (students == null)
{
    <img src="https://media4.giphy.com/media/3oEjI6SIIHBdRxXI40/200.gif" />
}
else
{
    <table>
        <thead>
            <tr>
                <th>Avatar</th>
                <th @onclick="sortByFirstname">First Name</th>
                <th @onclick="sortByLastname">Last Name</th>
                <th @onclick="sortByBirthdate">Birthdate</th>
                <th @onclick="sortByStudies">Studies</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in students)
            {
            <tr>
                <td @onclick="@(()=>GoToDetails(s.IdStudent))"><img src=@s.Avatar /></td>
                <td @onclick="@(()=>GoToDetails(s.IdStudent))">@s.FirstName</td>
                <td @onclick="@(()=>GoToDetails(s.IdStudent))">@s.LastName</td>
                <td @onclick="@(()=>GoToDetails(s.IdStudent))">@s.Birthdate.ToShortDateString()</td>
                <td @onclick="@(()=>GoToDetails(s.IdStudent))">@s.Studies</td>
                <td class="button_td"><button class="deleteButton" @onclick="(()=>DeleteRecord(s.IdStudent))">X</button></td>
            </tr>
                
            }
        </tbody>
    </table>
}



@code {

    // false = desc (by default)
    // true = asc
    bool byFirstName = false;
    bool byLastName = false;
    bool byBirthdate = false;
    bool byStudies = false;

    int counter = 0;
    List<Student> students;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        students = StudentConstructor.Students;
    }

    private void sortByFirstname()
    {
        byLastName = byBirthdate = byStudies = false;

        if (byFirstName)
        {
            students = students.OrderByDescending(s => s.FirstName).ToList();
            byFirstName = false;
        }
        else
        {
            students = students.OrderBy(s => s.FirstName).ToList();
            byFirstName = true;
        }

    }

    private void sortByLastname()
    {
        byFirstName = byBirthdate = byStudies = false;

        if (byLastName)
        {
            students = students.OrderByDescending(s => s.LastName).ToList();
            byLastName = false;
        }
        else
        {
            students = students.OrderBy(s => s.LastName).ToList();
            byLastName = true;
        }

    }

    private void sortByBirthdate()
    {
        byFirstName = byLastName = byStudies = false;

        if (byBirthdate)
        {
            students = students.OrderByDescending(s => s.Birthdate).ToList();
            byBirthdate = false;
        }
        else
        {
            students = students.OrderBy(s => s.Birthdate).ToList();
            byBirthdate = true;
        }

    }

    private void sortByStudies()
    {
        byFirstName = byLastName = byBirthdate = false;

        if (byStudies)
        {
            students = students.OrderByDescending(s => s.Studies).ToList();
            byStudies = false;
        }
        else
        {
            students = students.OrderBy(s => s.Studies).ToList();
            byStudies = true;
        }

    }

    private void GoToDetails(int IdStudent)
    {
        navigation.NavigateTo($"/studentdetails/{IdStudent}");
    }

    private async Task DeleteRecord(int IdStudent)
    {
        bool isConfirmed = await js.InvokeAsync<bool>("confirm", "confirm delete operation");
        if (isConfirmed)
        {
            Student studentTmp = students.First(st => st.IdStudent == IdStudent);
            students.Remove(studentTmp);
        }
    }
}
